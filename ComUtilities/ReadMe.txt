
warning C4311
=============
This warning detects 64-bit portability issues. For example, if code is compiled on a 64-bit platform, the value of a pointer (64 bits) will be truncated if it is assigned to an int (32 bits).

warning C4312
=============
This warning detects 64-bit portability issues. You attempted to assign a 32-bit value to a 64-bit type. For example, casting a 32-bit int or 32-bit long to a 64-bit pointer.
This can be an unsafe conversion in some circumstances when sign extension occurs. If a negative number is assigned to a pointer type of a size greater than the int, sign extension will occur and the pointer value will refer to a memory address different from the value of the int.
This warning is only issued when /Wp64 is used. See /Wp64 for more information. Also, see Rules for Using Pointers.

warning C4244
=============
A floating point type was converted to an integer type. A possible loss of data may have occurred.
If you get C4244, you should either change your program to use compatible types, or add some logic to your code, to ensure that the range of possible values will always be compatible with the types you are using.
C4244 can also fire at level 3, and 4; see Compiler Warning (levels 3 and 4) C4244 for more information.

====================================
/Wp64 is off by default in the Visual C++ 32-bit compiler and on by default in the Visual C++ 64-bit compiler.

Variables of the following types are tested on a 32-bit operating system as if they were being used on a 64-bit operating system:
int
long
pointer

If you regularly compile your application with a 64-bit compiler, you may want to disable /Wp64 in your 32-bit compilations, as the 64-bit compiler will detect all issues. For more information about targeting a Windows 64-bit operating system, see 64-Bit Programming with Visual C++.

To set this compiler option in the Visual Studio development environment
Open the project's Property Pages dialog box. For details, see How to: Open Project Property Pages. 

Click the C/C++ folder.
Click the General property page.
Modify the Detect 64-bit Portability Issues property.

========================================================================
    ACTIVE TEMPLATE LIBRARY : ComUtilities Project Overview
========================================================================

AppWizard has created this ComUtilities project for you to use as the starting point for
writing your Dynamic Link Library (DLL).


This file contains a summary of what you will find in each of the files that
make up your project.

ComUtilities.vcproj
    This is the main project file for VC++ projects generated using an Application Wizard. 
    It contains information about the version of Visual C++ that generated the file, and 
    information about the platforms, configurations, and project features selected with the
    Application Wizard.

ComUtilities.idl
    This file contains the IDL definitions of the type library, the interfaces
    and co-classes defined in your project.
    This file will be processed by the MIDL compiler to generate:
        C++ interface definitions and GUID declarations (ComUtilities.h)
        GUID definitions                                (ComUtilities_i.c)
        A type library                                  (ComUtilities.tlb)
        Marshaling code                                 (ComUtilities_p.c and dlldata.c)

ComUtilities.h
    This file contains the C++ interface definitions and GUID declarations of the
    items defined in ComUtilities.idl. It will be regenerated by MIDL during compilation.

ComUtilities.cpp
    This file contains the object map and the implementation of your DLL's exports.

ComUtilities.rc
    This is a listing of all of the Microsoft Windows resources that the
    program uses.

ComUtilities.def
    This module-definition file provides the linker with information about the exports
    required by your DLL. It contains exports for:
        DllGetClassObject  
        DllCanUnloadNow    
        GetProxyDllInfo    
        DllRegisterServer	
        DllUnregisterServer

/////////////////////////////////////////////////////////////////////////////
Other standard files:

StdAfx.h, StdAfx.cpp
    These files are used to build a precompiled header (PCH) file
    named ComUtilities.pch and a precompiled types file named StdAfx.obj.

Resource.h
    This is the standard header file that defines resource IDs.

/////////////////////////////////////////////////////////////////////////////
Proxy/stub DLL project and module definition file:

ComUtilitiesps.vcproj
    This file is the project file for building a proxy/stub DLL if necessary.
	The IDL file in the main project must contain at least one interface and you must 
	first compile the IDL file before building the proxy/stub DLL.	This process generates
	dlldata.c, ComUtilities_i.c and ComUtilities_p.c which are required
	to build the proxy/stub DLL.

ComUtilitiesps.def
    This module definition file provides the linker with information about the exports
    required by the proxy/stub.

/////////////////////////////////////////////////////////////////////////////
